public class Solution {
    // DO NOT MODIFY THE LIST
    public ArrayList < Integer > slidingMaximum(final List < Integer > A, int B) {
        int n = A.size();
        int i;
        ArrayList < Integer > res = new ArrayList < > ();
        int window = Math.min(A.size(), B);
        Deque < Node > deque = new LinkedList < > ();
        int val;
        Node ans;
        for (i = 0; i < window - 1; i++) {
            val = A.get(i);
            while (!deque.isEmpty() && deque.peekFirst().val <= val) {
                deque.pollFirst();
            }
            deque.addFirst(new Node(i, val));
        }
        for (; i < n; i++) {
            val = A.get(i);
            // removes the elements not in range
            while (!deque.isEmpty() && (i - deque.peekLast().index >= window)) {
                deque.pollLast();
            }
            // removes the elements lesser than A[i]
            while (!deque.isEmpty() && deque.peekFirst().val <= val) {
                deque.pollFirst();
            }
            deque.addFirst(new Node(i, val));
            ans = deque.peekLast();
            res.add(ans.val);
        }
        return res;
    }

    class Node {
        int val;
        int index;
        public Node(int index, int val) {
            this.index = index;
            this.val = val;
        }
    }
}
